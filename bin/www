#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var socket = require( 'socket.io' );



/**
 * Get port from environment and store in Express.
 */


//server.on('error', onError);
//server.on('listening', onListening);
//console.log("Server up and running on port " + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// *
//  * Event listener for HTTP server "listening" event.
 

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
//   debug('Listening on ' + bind);
//   console.log("Configuring a Twilio's TaskRouter Workspace");
//   workspace.setup().then(function (data) {
//     app.set('workerInfo', data[0]);
//     app.set('workspaceInfo', data[1]);
//     console.log(data)
//     console.log('Application configured!');
//     console.log('Call your Twilio number at: ' + process.env.TWILIO_NUMBER);
//   })
//   .catch(exitErrorHandler);
// }

function exitErrorHandler(error) {
  console.error('An error occurred:');
  console.error(error);
  process.exit(1);
}

